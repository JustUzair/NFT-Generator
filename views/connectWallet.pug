style.
    .grid {
    display: flex;
    align-items: center;
    flex-direction: column;
    }
    .btn {
    margin: 0.5rem;
    padding: 0.7rem;
    text-align: center;
    color: #0070f3;
    text-decoration: none;
    border: 1px solid #0070f3;
    border-radius: 10px;
    transition: color 0.15s ease, border-color 0.15s ease;
    width: 100%;
    background-color: white;
    }
    .btn:hover,
    .btn:focus,
    .btn:active {
    cursor: pointer;
    background-color: #fafafa;
    }
    .row {
    display: flex;
    margin-bottom: 0.5rem;
    width: 100%;
    }
    .label {
    flex-basis: 45%;
    padding-right: 10px;
    display: flex;
    align-items: center;
    justify-content: right;
    font-weight: bold;
    }
    .select {
    flex-basis: 30%;
    text-align: left;
    padding: 0.3rem 0.8rem;
    font-size: 1rem;
    border-radius: 8px;
    }
    .footer {
    display: flex;
    flex: 1;
    padding: 2rem 0;
    border-top: 1px solid #eaeaea;
    justify-content: center;
    align-items: center;
    margin-top: 10rem;
    }
    .footer a {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-grow: 1;
    }
    .logo {
    height: 1.5rem;
    margin-left: 0.5rem;
    }
    @media (max-width: 1200px) {
    .container {
    width: 100%;
    }
    }
block content
    .container
        // Logged In
        .grid.btn-logged-in
            button#get-user-info.btn Get User Info
            button#get-accounts.btn Get Accounts
            button#get-balance.btn Get Balance
            button#sign-message.btn Sign Message
            button#sign-tx.btn Sign Transaction
            button#send-tx.btn Send Transaction
            button#logout.btn Logout
            #console.console
                p#code.code
        // Logged Logout
        .grid.btn-logged-out
            button#login.btn Login
    script(src='https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js')
    script(src='https://cdn.jsdelivr.net/gh/ethereum/web3.js@1/dist/web3.min.js')
    script(src='https://cdn.jsdelivr.net/npm/@web3auth/modal')
    script.
        const web3authSdk = window.Modal;
        let web3AuthInstance = null;
        (async function init() {
        $(".btn-logged-in").hide();
        $("#sign-tx").hide();
        web3AuthInstance = new web3authSdk.Web3Auth({
        chainConfig: {
        chainNamespace: "eip155",
        rpcTarget: "https://rpc.ankr.com/eth_goerli",
        chainId: "0x5",
        },
        uiConfig: {
        theme: "dark",
        defaultLanguage: "en",
        },
        clientId: "BDgL0MrbmcdYox_pUAabv-IR002jQjgO5zCvuSdBYUHj4xYbPGMNfRKREn6wLlYZ5N_xG_x0Vrn38Ko4k5pRpoo", // get your clientId from https://developer.web3auth.io
        });
        subscribeAuthEvents(web3AuthInstance);
        await web3AuthInstance.initModal();
        console.log("web3AuthInstance", web3AuthInstance, web3AuthInstance.provider);
        if (web3AuthInstance.provider) {
        $(".btn-logged-in").show();
        $(".btn-logged-out").hide();
        if (web3AuthInstance.connectedAdapterName === "openlogin") {
        $("#sign-tx").show();
        }
        } else {
        $(".btn-logged-out").show();
        $(".btn-logged-in").hide();
        }
        })();
        function subscribeAuthEvents(web3auth) {
            web3auth.on("connected", (data) => {
                console.log("Yeah!, you are successfully logged in", data);
            });
            web3auth.on("connecting", () => {
                console.log("connecting");
            });
            web3auth.on("disconnected", () => {
                console.log("disconnected");
            });
            web3auth.on("errored", (error) => {
                console.log("some error or user have cancelled login request", error);
            });
            web3auth.on("MODAL_VISIBILITY", (isVisible) => {
                console.log("modal visibility", isVisible);
            });
        }
        $("#login").click(async function(event) {
        try {
        const provider = await web3AuthInstance.connect();
        console.log("provider after login", provider);
        $(".btn-logged-out").hide();
        $(".btn-logged-in").show();
        } catch (error) {
        console.error(error.message);
        }
        });
        $("#logout").click(async function(event) {
        try {
        await web3AuthInstance.logout();
        $(".btn-logged-in").hide();
        $(".btn-logged-out").show();
        } catch (error) {
        console.error(error.message);
        }
        });
        $("#get-user-info").click(async function(event) {
        try {
        const user = await web3AuthInstance.getUserInfo();
        $("#code").text(JSON.stringify(user || {}, null, 2));
        } catch (error) {
        console.error(error.message);
        }
        });
        $("#get-accounts").click(async function(event) {
        try {
        const web3 = new Web3(web3AuthInstance.provider);
        //- console.log(`Provider : ${CircularJSON.stringify(web3AuthInstance.provider)}`)
        const accounts = await web3.eth.getAccounts();
        $("#code").text(JSON.stringify(["Eth accounts", accounts], null, 2));
        } catch (error) {
        console.error(error.message);
        }
        });
        $("#get-balance").click(async function(event) {
        try {
        const web3 = new Web3(web3AuthInstance.provider);
        const accounts = await web3.eth.getAccounts();
        const balance = await web3.eth.getBalance(accounts[0]);
        $("#code").text(JSON.stringify(["Eth balance", balance], null, 2));
        } catch (error) {
        console.error(error.message);
        }
        });
        $("#sign-message").click(async function(event) {
        try {
        const provider = web3AuthInstance.provider;
        const web3 = new Web3(provider);
        const accounts = await web3.eth.getAccounts();
        const message = "0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad";
        web3.currentProvider?.send({
        method: "eth_sign",
        params: [accounts[0], message],
        from: accounts[0],
        },
        (err, result) => {
        if (err) {
        return console.error(err);
        }
        $("#code").text(JSON.stringify(["Eth sign message => true", result], null, 2));
        }
        );
        } catch (error) {
        console.error(error.message);
        }
        });
        $("#sign-tx").click(async function(event) {
        try {
        const provider = web3AuthInstance.provider;
        const web3 = new Web3(provider);
        const accounts = await web3.eth.getAccounts();
        const txRes = await web3.eth.signTransaction({
        from: accounts[0],
        to: accounts[0],
        value: web3.utils.toWei("0.01"),
        });
        $("#code").text(JSON.stringify(txRes));
        } catch (error) {
        console.error(error.message);
        }
        });
        $("#send-tx").click(async function(event) {
        try {
        const provider = web3AuthInstance.provider;
        const web3 = new Web3(provider);
        const accounts = await web3.eth.getAccounts();
        const message = "0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad";
        const txRes = await web3.eth.sendTransaction({
        from: accounts[0],
        to: accounts[0],
        value: web3.utils.toWei("0.01"),
        });
        $("#code").text(JSON.stringify(txRes));
        } catch (error) {
        console.error(error.message);
        }
        });
